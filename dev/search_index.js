var documenterSearchIndex = {"docs":
[{"title":"Manual","location":"manual/#Manual","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"","page":"Manual"},{"title":"Categorical Features","location":"manual/#Categorical-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Functions for encoding a column of categorical data as multiple, binary columns.","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Modules = [FeatureEng]\nPages = [\"categorical.jl\"]","page":"Manual"},{"title":"FeatureEng.encode_dummy","location":"manual/#FeatureEng.encode_dummy-Union{Tuple{T}, Tuple{T,T,String}} where T<:AbstractArray","category":"method","text":"encode_dummy(column::T[, categories::T[, prefix::String]]) where T <: AbstractArray\n\nSame as encode_onehot except that it drops the first column (to help prevent issues caused by multicollinearity).\n\nSee also: encode_onehot, encode_hash\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.encode_hash","location":"manual/#FeatureEng.encode_hash-Union{Tuple{T}, Tuple{T,Int32}, Tuple{T,Int32,String}} where T<:AbstractArray","category":"method","text":"encode_hash(column::T, n_cols::Int = 8, prefix::String = \"c\") where T <: AbstractArray\n\nDeterministically encode categorical features with high cardinality as a  DataFrame with n_cols columns. \n\njulia> data = [1:100;1000;];\njulia> encode_hash([1:1_000:10_000;])\n10×8 DataFrame\n Row │ c1     c2     c3     c4     c5     c6     c7     c8    \n     │ Int64  Int64  Int64  Int64  Int64  Int64  Int64  Int64 \n─────┼────────────────────────────────────────────────────────\n   1 │     1      1      1      1      1      1      1      0\n   2 │     1      1      0      1      1      0      1      0\n   3 │     1      0      1      0      1      1      0      1\n   4 │     1      1      1      1      0      1      1      1\n   5 │     1      0      0      0      0      0      1      0\n   6 │     1      0      1      0      0      1      0      1\n   7 │     0      1      1      0      0      1      1      1\n   8 │     1      1      0      1      0      1      0      0\n   9 │     0      1      0      1      0      1      1      0\n  10 │     0      1      0      0      0      1      1      0\n\nSee also: encode_onehot, encode_dummy\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.encode_onehot","location":"manual/#FeatureEng.encode_onehot-Union{Tuple{T}, Tuple{T,T,String}} where T<:AbstractArray","category":"method","text":"encode_onehot(column::T[, categories::T[, prefix::String]]) where T <: AbstractArray\n\nConverts a categorical column into a DataFrame of one-hot-encoded columns – with one binary-encoded column per unique value in column.\n\nExamples\n\nThe basic version of this function makes a column for each unique value in column.\n\njulia> data = [3,1,2,4];\njulia> encode_onehot(data)\n4×4 DataFrame\n Row │ 1      2      3      4     \n     │ Bool   Bool   Bool   Bool  \n─────┼────────────────────────────\n   1 │ false  false   true  false\n   2 │  true  false  false  false\n   3 │ false   true  false  false\n   4 │ false  false  false   true\n\nYou can also specify a prefix for each column.\n\njulia> data = [3,1,2,4];\njulia> encode_onehot(data,\"col_\")\n4×4 DataFrame\n Row │ col_1  col_2  col_3  col_4 \n     │ Bool   Bool   Bool   Bool  \n─────┼────────────────────────────\n   1 │ false  false   true  false\n   2 │  true  false  false  false\n   3 │ false   true  false  false\n   4 │ false  false  false   true\n\nAdditionally, you can specify the categories to convert to columns,  regardless of whether it exists in column.\n\njulia> data = [3,1,2,4];\njulia> encode_onehot(data,[1:6;],\"c\")\n4×6 DataFrame\n Row │ c1     c2     c3     c4     c5     c6    \n     │ Bool   Bool   Bool   Bool   Bool   Bool  \n─────┼──────────────────────────────────────────\n   1 │ false  false   true  false  false  false\n   2 │  true  false  false  false  false  false\n   3 │ false   true  false  false  false  false\n   4 │ false  false  false   true  false  false\n\nSee also: encode_dummy, encode_hash\n\n\n\n\n\n","page":"Manual"},{"title":"DateTime Features","location":"manual/#DateTime-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Functions for extracting helpful information from a column DateTime data.","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Modules = [FeatureEng]\nPages = [\"datetime.jl\"]","page":"Manual"},{"title":"FeatureEng.extract_date_features","location":"manual/#FeatureEng.extract_date_features-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.Date, Dates.DateTime})","category":"method","text":"extract_date_features(datetimes::T) where T <: AbstractArray{<:Union{Date,DateTime}}\n\nExtract a DataFrame of features from an array of DateTime or Date objects. Features extracted:\n\nyear: Year from datetime\nmonth: Month from datetime\ndayofmonth: Day of the month (1-31)\ndayofweek: Day of the week (ordered)\nisweekend: Is datetime a weekend?\nquarter: The quarter from datetimes\n\nExamples\n\njulia> data = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\njulia> extract_date_features(data)\n3×6 DataFrame\n Row │ year   month    dayofmonth  dayofweek  isweekend  quarter \n     │ Int64  Cat…     Int64       Cat…       Bool       Int64   \n─────┼───────────────────────────────────────────────────────────\n   1 │  2021  January          27  Wednesday      false        1\n   2 │  1999  October           5  Tuesday        false        4\n   3 │  2010  June             11  Friday         false        2\n\nSee also: extract_datetime_features, extract_time_features\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.extract_datetime_features","location":"manual/#FeatureEng.extract_datetime_features-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Dates.DateTime)","category":"method","text":"extract_datetime_features(datetimes::T) where T <: AbstractArray{<:DateTime}\n\nExtract a DataFrame of features from an array of DateTime objects. Features extracted:\n\nyear: Year from datetime\nmonth: Month from datetime\ndayofmonth: Day of the month (0-31)\ndayofweek: Day of the week (ordered)\nisweekend: Is datetime a weekend?\nquarter: The quarter from datetimes\nhour: Hour of the day from datetime\nminute: Minute from datetime\nsecond: Second from datetime\nisAM: Is time AM (vs PM)?\n\nThe same as the following:\n\njulia>  hcat(\n    extract_date_features(datetimes),\n    extract_time_features(datetimes)\n    )\n\nExamples\n\njulia> data = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\njulia> extract_datetime_features(data)\n3×10 DataFrame\n Row │ year   month    dayofmonth  dayofweek  isweekend  quarter  hour   minut ⋯\n     │ Int64  Cat…     Int64       Cat…       Bool       Int64    Int64  Int64 ⋯\n─────┼──────────────────────────────────────────────────────────────────────────\n   1 │  2021  January          27  Wednesday      false        1     14        ⋯\n   2 │  1999  October           5  Tuesday        false        4      1      1\n   3 │  2010  June             11  Friday         false        2     11\n                                                               3 columns omitted\n\nSee also: extract_date_features, extract_time_features\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.extract_time_features","location":"manual/#FeatureEng.extract_time_features-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.DateTime, Dates.Time})","category":"method","text":"extract_time_features(datetimes::T) where T <: AbstractArray{<:Union{Time,DateTime}}\n\nExtract a DataFrame of features from an array of DateTime or Time objects. Features extracted:\n\nhour: Hour of the day from datetime\nminute: Minute from datetime\nsecond: Second from datetime\nisAM: Is time AM (vs PM)?\n\nExamples\n\njulia> data = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\njulia> extract_time_features(data)\n3×4 DataFrame\n Row │ hour   minute  second   isAM  \n     │ Int64  Int64   Float64  Bool  \n─────┼───────────────────────────────\n   1 │    14       3     25.0  false\n   2 │     1      13     43.0   true\n   3 │    11       0      0.0   true\n\nSee also: extract_datetime_features, extract_date_features\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.get_month","location":"manual/#FeatureEng.get_month-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.Date, Dates.DateTime})","category":"method","text":"get_month(datetimes::T) where T <: AbstractArray{<:Union{Date,DateTime}}\n\nReturn an ordered CategoricalArray of month names extracted from datetimes.\n\nExamples:\n\njulia> data = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\njulia> get_month(data)\n3-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"January\"\n \"October\"\n \"June\"\n\nSee also: extract_datetime_features, extract_date_features, get_weekday\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.get_weekday","location":"manual/#FeatureEng.get_weekday-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.Date, Dates.DateTime})","category":"method","text":"get_weekday(datetimes::T) where T <: AbstractArray{<:Union{Date,DateTime}}\n\nReturn an ordered CategoricalArray of weekday names extracted from datetimes.\n\nExamples:\n\njulia> data = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\njulia> get_weekday(data)\n3-element CategoricalArrays.CategoricalArray{String,1,UInt32}:\n \"Wednesday\"\n \"Tuesday\"\n \"Friday\"\n\nSee also: extract_datetime_features, extract_date_features, get_weekday\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.strp_datetimes","location":"manual/#FeatureEng.strp_datetimes-Union{Tuple{T}, Tuple{T,Union{String, Dates.DateFormat}}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:AbstractString)","category":"method","text":"strp_datetimes(datetimes::T, format::Union{String,DateFormat} = \"y-m-d H:M:S\") where T <: AbstractArray{<:AbstractString}\n\nConvert an array of timestamps and to an array of DateTime objects.\n\nAny of the strings it's unable to parse, will be replaced with missing.\n\nExamples\n\njulia> date_strings = [\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"abcdefg\"\n    ];\njulia> strp_datetimes(date_strings)\n3-element Array{Union{Missing, DateTime},1}:\n 2021-01-27T14:03:25\n 1999-10-05T01:13:43\n missing\n\n\n\n\n\n","page":"Manual"},{"title":"Numeric Features","location":"manual/#Numeric-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Working with numeric features.","page":"Manual"},{"title":"Numeric – Binning Features","location":"manual/#Numeric-–-Binning-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Converting continuous data to categorical data.","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Modules = [FeatureEng]\nPages = [\"binning.jl\"]","page":"Manual"},{"title":"FeatureEng.apply_transform","location":"manual/#FeatureEng.apply_transform-Tuple{BinFixedWidth,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.apply_transform","location":"manual/#FeatureEng.apply_transform-Tuple{BinQuantile,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.fit_transform!","location":"manual/#FeatureEng.fit_transform!-Tuple{BinFixedWidth,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.fit_transform!","location":"manual/#FeatureEng.fit_transform!-Tuple{BinQuantile,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"Numeric – Scaling Features","location":"manual/#Numeric-–-Scaling-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Scaling or normalizing numeric columns.","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"A helpful pre-processing step for ML models that are sensitive to data scale (ex k-means clustering, regularized regression).","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Modules = [FeatureEng]\nPages = [\"scaling.jl\"]","page":"Manual"},{"title":"FeatureEng.apply_transform","location":"manual/#FeatureEng.apply_transform-Tuple{ScaleL2,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.apply_transform","location":"manual/#FeatureEng.apply_transform-Tuple{ScaleMinMax,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.apply_transform","location":"manual/#FeatureEng.apply_transform-Tuple{ScaleVariance,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.fit_transform!","location":"manual/#FeatureEng.fit_transform!-Tuple{ScaleL2,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.fit_transform!","location":"manual/#FeatureEng.fit_transform!-Tuple{ScaleMinMax,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"FeatureEng.fit_transform!","location":"manual/#FeatureEng.fit_transform!-Tuple{ScaleVariance,AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Real}","category":"method","text":"\n\n\n\n","page":"Manual"},{"title":"Numeric – Transforming Features","location":"manual/#Numeric-–-Transforming-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Power transformations for numeric data.","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Helpful for data with a distribution that doesn't work well with the model you're using (ex log-transforming data drawn from an exponential distribution before linear regression).","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Modules = [FeatureEng]\nPages = [\"transforming.jl\"]","page":"Manual"},{"title":"FeatureEng.transformBoxCox","location":"manual/#FeatureEng.transformBoxCox-Union{Tuple{T}, Tuple{T,Real}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:Number)","category":"method","text":"transformBoxCox(data::T, λ::Real = 0.0) where T <: AbstractArray{<: Number}\n\nBox-Cox power transformation following the following function:\n\ny_i^(lambda) = leftbeginmatrix\nfracy_i^lambda - 1lambda  mathrmif lambda neq  0  \nmathrmln y_i  mathrmif lambda = 0 \nendmatrixright\n\nExamples:\n\njulia> data = [0:5;];\n\njulia> transformBoxCox(data)\n6-element Array{Float64,1}:\n -Inf\n   0.0\n   0.6931471805599453\n   1.0986122886681098\n   1.3862943611198906\n   1.6094379124341003\n\njulia> transformBoxCox(data,.1)\n6-element Array{Float64,1}:\n -10.0\n   0.0\n   0.7177346253629313\n   1.1612317403390437\n   1.486983549970351\n   1.7461894308801895\n\njulia> transformBoxCox(data,1)\n6-element Array{Float64,1}:\n -1.0\n  0.0\n  1.0\n  2.0\n  3.0\n  4.0\n\nSee also: transformLog, transformRoot\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.transformLog","location":"manual/#FeatureEng.transformLog-Union{Tuple{T}, Tuple{T,Real}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:Number)","category":"method","text":"transformLog(data::T, base::Real = ℯ) where T <: AbstractArray{<: Number}\n\nLog transform data using log-base, base.\n\nExamples:\n\njulia> data = [0:5;];\n\njulia> transformLog(data)\n6-element Array{Float64,1}:\n -Inf\n   0.0\n   0.6931471805599453\n   1.0986122886681098\n   1.3862943611198906\n   1.6094379124341003\n\njulia> transformLog(data,2)\n6-element Array{Float64,1}:\n -Inf\n   0.0\n   1.0\n   1.5849625007211563\n   2.0\n   2.321928094887362\n\n\nSee also: transformRoot, transformBoxCox\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.transformRoot","location":"manual/#FeatureEng.transformRoot-Union{Tuple{T}, Tuple{T,Real}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:Number)","category":"method","text":"transformRoot(data::T, index::Real = 10) where T <: AbstractArray{<: Number}\n\nRoot transform data using root index, index.\n\nExamples:\n\njulia> data = [0:5;];\n\njulia> transformRoot(data)\n6-element Array{Float64,1}:\n 0.0\n 1.0\n 1.0717734625362931\n 1.1161231740339044\n 1.148698354997035\n 1.174618943088019\n\njulia> transformRoot(data,2)\n6-element Array{Float64,1}:\n 0.0\n 1.0\n 1.4142135623730951\n 1.7320508075688772\n 2.0\n 2.23606797749979\n\nSee also: transformLog, transformBoxCox\n\n\n\n\n\n","page":"Manual"},{"title":"Numeric – Interaction Features","location":"manual/#Numeric-–-Interaction-Features","category":"section","text":"","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Calculate polynomial features to a specified degree before performing something like polynomial regression.","page":"Manual"},{"title":"Manual","location":"manual/","category":"page","text":"Modules = [FeatureEng]\nPages = [\"interactions.jl\"]","page":"Manual"},{"title":"FeatureEng.polynomial","location":"manual/#FeatureEng.polynomial-Union{Tuple{DataFrames.DataFrame}, Tuple{T}, Tuple{DataFrames.DataFrame,T}} where T<:Integer","category":"method","text":"polynomial(df::DataFrame, degree::T = 2) where T <: Integer\n\nCalculate polynomial interaction  terms between columns in a DataFrame.\n\nIf you have a DataFrame with 3 columns: x, y, and z, you can get degree-2  polynomial interaction terms: x*x, x*y, x*z, y*y, y*z, and z*z.\n\nExamples\n\njulia> using DataFrames\n\njulia> df = DataFrame(a=1:10,b=repeat(0:1,5))\n10×2 DataFrame\n Row │ a      b     \n     │ Int64  Int64 \n─────┼──────────────\n   1 │     1      0\n   2 │     2      1\n   3 │     3      0\n   4 │     4      1\n   5 │     5      0\n   6 │     6      1\n   7 │     7      0\n   8 │     8      1\n   9 │     9      0\n  10 │    10      1\n\njulia> polynomial(df,2)\n10×5 DataFrame\n Row │ a      a_a    a_b    b      b_b   \n     │ Int64  Int64  Int64  Int64  Int64 \n─────┼───────────────────────────────────\n   1 │     1      1      0      0      0\n   2 │     2      4      2      1      1\n   3 │     3      9      0      0      0\n   4 │     4     16      4      1      1\n   5 │     5     25      0      0      0\n   6 │     6     36      6      1      1\n   7 │     7     49      0      0      0\n   8 │     8     64      8      1      1\n   9 │     9     81      0      0      0\n  10 │    10    100     10      1      1\n\njulia> polynomial(df,3)\n10×9 DataFrame\n Row │ a      a_a    a_a_a  a_a_b  a_b    a_b_b  b      b_b    b_b_b \n     │ Int64  Int64  Int64  Int64  Int64  Int64  Int64  Int64  Int64 \n─────┼───────────────────────────────────────────────────────────────\n   1 │     1      1      1      0      0      0      0      0  0\n   2 │     2      4      8      4      2      2      1      1  1\n   3 │     3      9     27      0      0      0      0      0  0\n   4 │     4     16     64     16      4      4      1      1  1\n   5 │     5     25    125      0      0      0      0      0  0\n   6 │     6     36    216     36      6      6      1      1  1\n   7 │     7     49    343      0      0      0      0      0  0\n   8 │     8     64    512     64      8      8      1      1  1\n   9 │     9     81    729      0      0      0      0      0  0\n  10 │    10    100   1000    100     10     10      1      1  1\n\n\n\n\n\n","page":"Manual"},{"title":"FeatureEng.jl","location":"#FeatureEng.jl","category":"section","text":"","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"CurrentModule = FeatureEng","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"(Image: build)","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"created by Austin Poor","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"A library for feature engineering in Julia.","page":"FeatureEng.jl"},{"title":"Installation","location":"#Installation","category":"section","text":"","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"You can in install FeatureEng with:","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"julia> using Pkg\njulia> Pkg.add(\"FeatureEng\")","page":"FeatureEng.jl"},{"title":"Where to Start","location":"#Where-to-Start","category":"section","text":"","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"Check out the manual to find helpful functions based on the types of data you're working with (ex categorical, datetime, or numeric features).","page":"FeatureEng.jl"},{"title":"Feedback","location":"#Feedback","category":"section","text":"","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"Let me know what you think of FeatureEng.jl!","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"I'd love to hear any suggestions for new features to add, helpful features you use in your ML process, or any feedback from using the library.","page":"FeatureEng.jl"},{"title":"FeatureEng.jl","location":"","category":"page","text":"Feel free to reach out to me on twitter or on GitHub – submit an issue or a PR!","page":"FeatureEng.jl"},{"title":"Examples","location":"examples/#Examples","category":"section","text":"","page":"Examples"},{"title":"Examples","location":"examples/","category":"page","text":"Coming soon...","page":"Examples"},{"title":"Examples","location":"examples/","category":"page","text":"","page":"Examples"}]
}
