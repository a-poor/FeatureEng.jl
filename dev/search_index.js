var documenterSearchIndex = {"docs":
[{"title":"API Reference","location":"api-reference/#API-Reference","category":"section","text":"","page":"API Reference"},{"title":"API Reference","location":"api-reference/","category":"page","text":"Modules = [FeatureEng]","page":"API Reference"},{"title":"FeatureEng.encode_dummy","location":"api-reference/#FeatureEng.encode_dummy-Union{Tuple{T}, Tuple{T,T,String}} where T<:AbstractArray","category":"method","text":"@doc     encode_dummy(column::T[, categories::T[, prefix::String]]) where T <: AbstractArray\n\nSame as encode_onehot except that it drops the first column (to help prevent issues caused by multicollinearity).\n\nSee also: encode_onehot, encode_hash\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.encode_hash","location":"api-reference/#FeatureEng.encode_hash-Union{Tuple{T}, Tuple{T,Int32}, Tuple{T,Int32,String}} where T<:AbstractArray","category":"method","text":"@doc     encodehash(column::T, ncols::Int = 8, prefix::String = \"c\") where T <: AbstractArray\n\nDeterministically encode categorical features with high cardinality as a  DataFrame with n_cols columns. \n\ndata = [1:100;1000;];\nencode_hash([1:1_000:10_000;])\n\nSee also: encode_onehot, encode_dummy\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.encode_onehot","location":"api-reference/#FeatureEng.encode_onehot-Union{Tuple{T}, Tuple{T,T,String}} where T<:AbstractArray","category":"method","text":"@doc     encode_onehot(column::T[, categories::T[, prefix::String]]) where T <: AbstractArray\n\nConverts a categorical column into a DataFrame of one-hot-encoded columns – with one binary-encoded column per unique value in column.\n\nExamples\n\nThe basic version of this function makes a column for each unique value in column.\n\ndata = [3,1,2,4];\nencode_onehot(data)\n\nYou can also specify a prefix for each column.\n\ndata = [3,1,2,4];\nencode_onehot(data,prefix=\"col_\")\n\nAdditionally, you can specify the categories to convert to columns,  regardless of whether it exists in column.\n\ndata = [3,1,2,4];\nencode_onehot(data,[1:6;],\"c\")\n\nSee also: encode_dummy, encode_hash\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.extract_date_features","location":"api-reference/#FeatureEng.extract_date_features-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.Date, Dates.DateTime})","category":"method","text":"@doc     extractdatefeatures(datetimes::T) where T <: AbstractArray{<:Union{Date,DateTime}}\n\nExtract a DataFrame of features from an array of DateTime or Date objects. Features extracted:\n\nyear: Year from datetime\nmonth: Month from datetime\ndayofmonth: Day of the month (1-31)\ndayofweek: Day of the week (ordered)\nisweekend: Is datetime a weekend?\nquarter: The quarter from datetimes\n\nExamples\n\ndata = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\nextract_date_features(data)\n\nSee also: extract_datetime_features, extract_time_features\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.extract_datetime_features","location":"api-reference/#FeatureEng.extract_datetime_features-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Dates.DateTime)","category":"method","text":"@doc     extractdatetimefeatures(datetimes::T) where T <: AbstractArray{<:DateTime}\n\nExtract a DataFrame of features from an array of DateTime objects. Features extracted:\n\nyear: Year from datetime\nmonth: Month from datetime\ndayofmonth: Day of the month (0-31)\ndayofweek: Day of the week (ordered)\nisweekend: Is datetime a weekend?\nquarter: The quarter from datetimes\nhour: Hour of the day from datetime\nminute: Minute from datetime\nsecond: Second from datetime\nisAM: Is time AM (vs PM)?\n\nThe same as the following:\n\nhcat(\n    extract_date_features(datetimes),\n    extract_time_features(datetimes)\n    )\n\n# Examples\n\n\n@repl data = strpdatetimes([     \"2021-01-27 14:03:25\",     \"1999-10-05 01:13:43\",     \"2010-06-11 11:00:00\" ]); extractdatetime_features(data) ```\n\nSee also: extract_date_features, extract_time_features\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.extract_time_features","location":"api-reference/#FeatureEng.extract_time_features-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.DateTime, Dates.Time})","category":"method","text":"@doc     extracttimefeatures(datetimes::T) where T <: AbstractArray{<:Union{Time,DateTime}}\n\nExtract a DataFrame of features from an array of DateTime or Time objects. Features extracted:\n\nhour: Hour of the day from datetime\nminute: Minute from datetime\nsecond: Second from datetime\nisAM: Is time AM (vs PM)?\n\nExamples\n\ndata = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\nextract_time_features(data)\n\nSee also: extract_datetime_features, extract_date_features\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.get_month","location":"api-reference/#FeatureEng.get_month-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.Date, Dates.DateTime})","category":"method","text":"@doc     get_month(datetimes::T) where T <: AbstractArray{<:Union{Date,DateTime}}\n\nReturn an ordered CategoricalArray of month names extracted from datetimes.\n\nExamples:\n\ndata = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\nget_month(data)\n\nSee also: extract_datetime_features, extract_date_features, get_weekday\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.get_weekday","location":"api-reference/#FeatureEng.get_weekday-Tuple{T} where T<:(AbstractArray{var\"#s20\",N} where N where var\"#s20\"<:Union{Dates.Date, Dates.DateTime})","category":"method","text":"@doc     get_weekday(datetimes::T) where T <: AbstractArray{<:Union{Date,DateTime}}\n\nReturn an ordered CategoricalArray of weekday names extracted from datetimes.\n\nExamples:\n\ndata = strp_datetimes([\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"2010-06-11 11:00:00\"\n]);\nget_weekday(data)\n\nSee also: extract_datetime_features, extract_date_features, get_weekday\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.polynomial","location":"api-reference/#FeatureEng.polynomial-Union{Tuple{DataFrames.DataFrame}, Tuple{T}, Tuple{DataFrames.DataFrame,T}} where T<:Integer","category":"method","text":"@doc     polynomial(df::DataFrame, degree::T = 2) where T <: Integer\n\nCalculate polynomial interaction  terms between columns in a DataFrame.\n\nIf you have a DataFrame with 3 columns: x, y, and z, you can get degree-2  polynomial interaction terms: x*x, x*y, x*z, y*y, y*z, and z*z.\n\nExamples\n\nusing DataFrames\ndf = DataFrame(a=1:10,b=repeat(0:1,5))\npolynomial(df,2)\npolynomial(df,3)\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.strp_datetimes","location":"api-reference/#FeatureEng.strp_datetimes-Union{Tuple{T}, Tuple{T,Union{String, Dates.DateFormat}}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:AbstractString)","category":"method","text":"@doc     strp_datetimes(datetimes::T, format::Union{String,DateFormat} = \"y-m-d H:M:S\") where T <: AbstractArray{<:AbstractString}\n\nConvert an array of timestamps and to an array of DateTime objects.\n\nAny of the strings it's unable to parse, will be replaced with missing.\n\nExamples\n\ndate_strings = [\n    \"2021-01-27 14:03:25\",\n    \"1999-10-05 01:13:43\",\n    \"abcdefg\"\n    ];\nstrp_datetimes(date_strings)\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.transformBoxCox","location":"api-reference/#FeatureEng.transformBoxCox-Union{Tuple{T}, Tuple{T,Real}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:Number)","category":"method","text":"@doc     transformBoxCox(data::T, λ::Real = 0.0) where T <: AbstractArray{<: Number}\n\nBox-Cox power transformation following the following function:\n\ny_i^(lambda) = leftbeginmatrix\nfracy_i^lambda - 1lambda  mathrmif lambda neq  0  \nmathrmln y_i  mathrmif lambda = 0 \nendmatrixright\n\nExamples:\n\ndata = [0:5;];\ntransformBoxCox(data)\ntransformBoxCox(data,.1)\ntransformBoxCox(data,1)\n\nSee also: transformLog, transformRoot\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.transformLog","location":"api-reference/#FeatureEng.transformLog-Union{Tuple{T}, Tuple{T,Real}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:Number)","category":"method","text":"@doc     transformLog(data::T, base::Real = ℯ) where T <: AbstractArray{<: Number}\n\nLog transform data using log-base, base.\n\nExamples:\n\ndata = [0:5;];\ntransformLog(data)\ntransformLog(data,2)\n\nSee also: transformRoot, transformBoxCox\n\n\n\n\n\n","page":"API Reference"},{"title":"FeatureEng.transformRoot","location":"api-reference/#FeatureEng.transformRoot-Union{Tuple{T}, Tuple{T,Real}} where T<:(AbstractArray{var\"#s19\",N} where N where var\"#s19\"<:Number)","category":"method","text":"@doc     transformRoot(data::T, index::Real = 10) where T <: AbstractArray{<: Number}\n\nRoot transform data using root index, index.\n\nExamples:\n\ndata = [0:5;];\ntransformRoot(data)\ntransformRoot(data,2)\n\nSee also: transformLog, transformBoxCox\n\n\n\n\n\n","page":"API Reference"},{"title":"Pipelines","location":"pipelines/#Pipelines","category":"section","text":"","page":"Pipelines"},{"title":"FeatureEng.jl Documentation","location":"#FeatureEng.jl-Documentation","category":"section","text":"","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"CurrentModule = FeatureEng","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"(Image: Test Julia Package) (Image: Documenter)","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"created by Austin Poor","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"A library for feature engineering in Julia.","page":"FeatureEng.jl Documentation"},{"title":"Installation","location":"#Installation","category":"section","text":"","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"julia> using Pkg\njulia> Pkg.add(\"FeatureEng\")","page":"FeatureEng.jl Documentation"},{"title":"Other Pages","location":"#Other-Pages","category":"section","text":"","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"","page":"FeatureEng.jl Documentation"},{"title":"API Reference","location":"#API-Reference","category":"section","text":"","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"@doc","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"FeatureEng","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"@autodoc","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"Modules = [FeatureEng]","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"@index","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"Modules = [FeatureEng]","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"@contents","page":"FeatureEng.jl Documentation"},{"title":"FeatureEng.jl Documentation","location":"","category":"page","text":"","page":"FeatureEng.jl Documentation"},{"title":"Getting Started","location":"getting-started/#Getting-Started","category":"section","text":"","page":"Getting Started"}]
}
